################################################################################
info:
  title: World Cleanup REST API
  version: '1.0'
################################################################################
swagger: '2.0'
basePath: "/api/v1"
schemes: [http, https]
consumes:
- application/json
produces:
- application/json
- text/html
- text/plain
################################################################################
x-security-schemas:
  description: This section documents the `x-security` endpoint markers.
  bearer:
    description: "The `bearer` string. Applying this schema to an endpoint will require the client to provide a valid JWT token as the `Authorization: Bearer JWT` header. **Example:** `x-security: [bearer]`."
  ignore-terms-lock:
    description: "The `ignore-terms-lock` string. Normally, all secured endpoints also check that the user has accepted the terms and conditions before granting access. Applying this schema to an endpoint skips this check. This schema has no effect if the endpoint is not secured with another schema."
  roles:
    description: "An array of strings. Applying this schema to an endpoint will grant access only if the logged-in user has one of the roles indicated by the strings. Please note that this schema needs another authentication schema (such as `bearer`) in order to obtain information about the user; applying it by itself will cause it to always fail."
    valid-roles:
      volunteer: The most basic type of generic user.
      leader: Area leader.
      admin: Country administrator.
      superadmin: Global administrator.
################################################################################
paths:
################################################################################
  /me:
    x-swagger-router-controller: users
    get:
      description: Information about the currently logged-in user.
      operationId: getUserProfile
      x-security: [bearer, ignore-terms-lock]
      responses:
        "200":
          description: Account information.
          schema:
            $ref: "#/definitions/AccountPlusAreas"
        "default":
          $ref: "#/responses/ErrorSet"
    put:
      description: Change details about the user.
      operationId: modifyUserProfile
      x-security: [bearer, ignore-terms-lock]
      parameters:
        - $ref: "#/parameters/ModifyProfile"
      responses:
        "200":
          description: Account information.
          schema:
            $ref: "#/definitions/Account"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /me/accept-terms:
    x-swagger-router-controller: users
    put:
      description: Mark the terms and conditions accepted for the logged-in user account.
      operationId: acceptTerms
      x-security: [bearer, ignore-terms-lock]
      responses:
        "200":
          description: The terms were marked accepted on this account.
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /me/team:
    x-swagger-router-controller: users
    put:
      description: Join user to team.
      operationId: modifyUserTeam
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/ModifyTeam"
      responses:
        "200":
          description: Account information.
          schema:
            $ref: "#/definitions/Account"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /auth/external:
    x-swagger-router-controller: users
    post:
      description: Obtain an authorization token in exchange for an OAUTH token from another authority.
      operationId: externalLogin
      parameters:
        - $ref: "#/parameters/AuthRequest"
      responses:
        "200":
          description: Contains authorization data.
          schema:
            $ref: "#/definitions/AuthPermission"
        "default":
          $ref: "#/responses/ErrorSet"
  /auth:
    delete:
      x-swagger-router-controller: users
      description: End the user's session.
      x-security: [bearer, ignore-terms-lock]
      operationId: logout
      responses:
        "200":
          description: User was logged out.
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /datasets:
    x-swagger-router-controller: datasets
    get:
      description: Fetch information about all the datasets offered by this server.
      operationId: getAllDatasets
      responses:
        "200":
          description: List of datasets.
          schema:
            type: array
            items:
              $ref: "#/definitions/Dataset"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /admin/trashpoints:
    x-swagger-router-controller: trashpoints
    get:
      description: Fetch location trashpoints contained in a specific dataset, within a specific polygon, and for a certain zoom level.
      operationId: getAllTrashpoints
      x-security: [bearer, roles:[superadmin]]
      parameters:
        - $ref: "#/parameters/PageSize"
        - $ref: "#/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/responses/AdminTrashpoints"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /users:
    x-swagger-router-controller: users
    get:
      description: Fetch all users.
      operationId: getAllUsers
      x-security: [bearer, {roles:[superadmin, leader]}]
      parameters:
        - $ref: "#/parameters/PageSize"
        - $ref: "#/parameters/PageNumber"
        - $ref: "#/parameters/Country"
        - $ref: "#/parameters/NameSearch"
      responses:
        "200":
          description: List of accounts.
          schema:
            type: object
            required: [total, pageSize, pageNumber, records]
            properties:
              total:
                $ref: "#/definitions/PageTotal"
              pageSize:
                $ref: "#/definitions/PageSize"
              pageNumber:
                $ref: "#/definitions/PageNumber"
              records:
                type: array
                items:
                  $ref: "#/definitions/Account"
        "default":
          $ref: "#/responses/ErrorSet"
  /users/{id}:
    x-swagger-router-controller: users
    get:
      description: Fetch complete info about a specific user.
      operationId: getOneUser
      x-security: [bearer, {roles:[superadmin, leader]}]
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: Full account information.
          schema:
            $ref: "#/definitions/AccountFullInfo"
        "default":
          $ref: "#/responses/ErrorSet"
  /users/{id}/lock:
    x-swagger-router-controller: users
    put:
      description: Set lock status on an account.
      operationId: lockAccount
      x-security: [bearer, {roles:[superadmin, leader]}]
      parameters:
        - $ref: "#/parameters/UUID"
        - name: request
          in: body
          required: true
          schema:
            type: object
            required: [locked]
            properties:
              locked:
                description: "True if the account should be locked, false if it should be unlocked."
                type: boolean
      responses:
        "200":
          description: The user account was locked or unlocked successfully.
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /teams:
    x-swagger-router-controller: teams
    get:
      description: List all teams.
      operationId: getAllTeams
      responses:
        "200":
          $ref: "#/responses/Teams"
        "default":
          $ref: "#/responses/ErrorSet"
  /teams/trashpoints:
    x-swagger-router-controller: teams
    get:
      description: Fetch information about trashpoints for all teams.
      operationId: getCountTeamsTrashpoints
      responses:
        "200":
          $ref: "#/responses/Teams"
        "default":
          $ref: "#/responses/ErrorSet"
  /teams/{id}:
    x-swagger-router-controller: teams
    get:
      description: Fetch complete info about a specific team.
      operationId: getTeam
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: Full team information.
          schema:
            $ref: "#/definitions/Team"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /areas/user:
    x-swagger-router-controller: areas
    get:
      description: List areas assigned to the account of the currently logged-in user.
      operationId: getMyAreas
      x-security: [bearer, {roles:[leader]}]
      responses:
        "200":
          description: List of areas.
          schema:
            type: array
            items:
              $ref: "#/definitions/Area"
        "default":
          $ref: "#/responses/ErrorSet"
  /areas/user/{id}:
    x-swagger-router-controller: areas
    get:
      description: List areas assigned to a specific user.
      operationId: getUserAreas
      x-security: [bearer, {roles:[superadmin]}]
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: List of areas.
          schema:
            type: array
            items:
              $ref: "#/definitions/Area"
        "default":
          $ref: "#/responses/ErrorSet"
  /areas:
    x-swagger-router-controller: areas
    get:
      description: List all areas.
      operationId: getAllAreas
      x-security: [bearer, {roles:[superadmin]}]
      parameters:
        - name: parentId
          in: query
          description: Use if only areas with a specific parent should be returned.
          required: false
          type: string
      responses:
        "200":
          description: List of areas.
          schema:
            type: array
            items:
              $ref: "#/definitions/Area"
        "default":
          $ref: "#/responses/ErrorSet"
  /areas/{id}/leader/{id2}:
    x-swagger-router-controller: areas
    put:
      description: Assign an user as leader of an area.
      operationId: assignAreaLeader
      x-security: [bearer, {roles:[superadmin]}]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/UUID2"
      responses:
        "200":
          description: User was successfully assigned to area.
        "default":
          $ref: "#/responses/ErrorSet"
  /areas/{id}/leader:
    x-swagger-router-controller: areas
    delete:
      description: Remove the leader of an area.
      operationId: removeAreaLeader
      x-security: [bearer, {roles:[superadmin]}]
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: User was successfully unassigned from area.
        "default":
          $ref: "#/responses/ErrorSet"
  /areas/{id}/trashpoints:
    x-swagger-router-controller: areas
    get:
      description: List of trashpoints falling into a specific area. Use special area code "-" (single dash) to request trashpoints which don't fall into any defined area.
      operationId: getAreaTrashpoints
      x-security: [bearer, {roles:[leader, superadmin]}]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/PageSize"
        - $ref: "#/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/responses/AreaTrashpoints"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  # /datasets/{id}:
  #   x-swagger-router-controller: datasets
  #   get:
  #     description: Fetch information about a specific dataset, identified by its unique identifier.
  #     operationId: getDataset
  #     parameters:
  #       - name: id
  #         description: Dataset identifier.
  #         in: path
  #         required: true
  #         type: string
  #     responses:
  #       "200":
  #         description: Individual dataset.
  #         schema:
  #           $ref: "#/definitions/Dataset"
  #       "default":
  #         $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /overview/clusters:
    x-swagger-router-controller: trashpoints
    post:
      description: Fetch clustered trashpoints from a specific dataset, within a certain rectangular area, and for a certain grid scale.
      operationId: getClustersOverview
      parameters:
        - $ref: "#/parameters/MapQuery"
      responses:
        "200":
          description: List of clusters.
          schema:
            type: array
            items:
              $ref: "#/definitions/Cluster"
        "default":
          $ref: "#/responses/ErrorSet"
  /overview/trashpoints:
    x-swagger-router-controller: trashpoints
    post:
      description: Fetch isolated (ie. with no neighbors nearby) location trashpoints from a specific dataset, within a certain rectangular area, and for a certain grid scale.
      operationId: getTrashpointsOverview
      parameters:
        - $ref: "#/parameters/MapQuery"
      responses:
        "200":
          description: List of simplified trashpoint data.
          schema:
            type: array
            items:
              $ref: "#/definitions/OverviewTrashpoint"
        "default":
          $ref: "#/responses/ErrorSet"
  /overview/trashpoints/grid:
    x-swagger-router-controller: trashpoints
    post:
      description: Fetch isolated (ie. with no neighbors nearby) location trashpoints from a specific dataset, within a certain grid slot, for a certain grid scale.
      operationId: getTrashpointsInGridCell
      parameters:
        - $ref: "#/parameters/MapQueryGrid"
      responses:
        "200":
          description: List of simplified trashpoint data.
          schema:
            type: array
            items:
              $ref: "#/definitions/OverviewTrashpoint"
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /trashpoints:
    x-swagger-router-controller: trashpoints
    put:
      description: Create a new trashpoint in a certain dataset ID.
      operationId: createTrashpoint
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/CreateTrashpoint"
      responses:
        "200":
          description: The newly created trashpoint.
          schema:
            $ref: "#/definitions/Trashpoint"
        "default":
          $ref: "#/responses/ErrorSet"
  /trashpoints/user:
    x-swagger-router-controller: trashpoints
    get:
      description: Fetch full information about trashpoints associated to the authenticated user.
      operationId: getUserOwnTrashpoints
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/PageSize"
        - $ref: "#/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/responses/AdminTrashpoints"
        "default":
          $ref: "#/responses/ErrorSet"
  /trashpoints/{id}:
    x-swagger-router-controller: trashpoints
    get:
      description: Fetch full information about a specific trashpoint ID.
      operationId: getTrashpoint
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: Individual trashpoint or cluster.
          schema:
            $ref: "#/definitions/Trashpoint"
        "default":
          $ref: "#/responses/ErrorSet"
    put:
      description: Modify details of a specific trashpoint.
      operationId: modifyTrashpoint
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/ModifyTrashpoint"
      responses:
        "200":
          description: Individual trashpoint or cluster.
          schema:
            $ref: "#/definitions/Trashpoint"
        "default":
          $ref: "#/responses/ErrorSet"
    delete:
      description: Remove a specific trashpoint.
      operationId: removeTrashpoint
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: Trashpoint has been removed.
        "default":
          $ref: "#/responses/ErrorSet"
  #-----------------------------------------------------------------------------
  /trashpoints/{id}/images:
    x-swagger-router-controller: images
    get:
      description: Fetch the images associated with a specific trashpoint ID.
      operationId: getTrashpointImages
      parameters:
        - $ref: "#/parameters/UUID"
      responses:
        "200":
          description: List of images.
          schema:
            type: array
            items:
              $ref: "#/definitions/TrashpointImage"
        "default":
          $ref: "#/responses/ErrorSet"
    put:
      description: Allocate a new image associated with a specific trashpoint ID.
      operationId: allocateTrashpointImages
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/ImageAllocate"
      responses:
        "200":
          $ref: "#/responses/StorageAuth"
        "default":
          $ref: "#/responses/ErrorSet"
    post:
      description: Confirm the upload of an image.
      operationId: confirmTrashpointImages
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/ImageConfirm"
      responses:
        "200":
          description: All indicated images were processed successfully.
        "default":
          $ref: "#/responses/ErrorSet"
  /trashpoints/{id}/images/{id2}:
    x-swagger-router-controller: images
    delete:
      description: Delete an image. The 1st ID indicates the trashpoint, the 2nd the image.
      operationId: deleteTrashpointImages
      x-security: [bearer]
      parameters:
        - $ref: "#/parameters/UUID"
        - $ref: "#/parameters/UUID2"
      responses:
        "200":
          description: The indicated image and their dependent images were deleted.
        "default":
          $ref: "#/responses/ErrorSet"

################################################################################
parameters:
################################################################################
  PageSize:
    name: pageSize
    in: query
    description: number of items on a page.
    required: true
    type: integer
    minimum: 10
    maximum: 50
  PageNumber:
    name: pageNumber
    in: query
    description: number of items on a page.
    required: true
    type: integer
    minimum: 1
  #-----------------------------------------------------------------------------
  ImageAllocate:
    name: request
    in: body
    required: true
    schema:
      type: object
      required: [count]
      properties:
        count:
          type: integer
          minimum: 1
          maximum: 3
  ImageConfirm:
    name: request
    in: body
    required: true
    schema:
      type: object
      required: [confirmed, failed]
      properties:
        confirmed:
          description: List of image IDs that have been uploaded successfully.
          type: array
          uniqueItems: true
          items:
            $ref: "#/definitions/UUID"
        failed:
          description: List of image IDs that have failed to upload.
          type: array
          uniqueItems: true
          items:
            $ref: "#/definitions/UUID"
  #-----------------------------------------------------------------------------
  NameSearch:
    name: nameSearch
    in: query
    required: false
    type: string
    minLength: 3
    maxLength: 10
  #-----------------------------------------------------------------------------
  Country:
    name: country
    in: query
    required: false
    type: string
    enum: [AD, AE, AF, AG, AI, AL, AM, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]
  #-----------------------------------------------------------------------------
  ModifyProfile:
    name: update
    in: body
    required: true
    schema:
      type: object
      required: [country]
      properties:
        country:
          $ref: "#/definitions/CountryCode"
  #-----------------------------------------------------------------------------
  ModifyTeam:
    name: update
    in: body
    required: true
    schema:
      type: object
      required: [team]
      properties:
        team:
          $ref: "#/definitions/UUID"
  #-----------------------------------------------------------------------------
  ModifyTrashpoint:
    name: trashpoint
    in: body
    required: true
    schema:
      type: object
      required: [hashtags, composition, location, amount, name, address, status]
      properties:
        location:
          $ref: "#/definitions/GeoPoint"
        status:
          $ref: "#/definitions/TrashModifyStatus"
        amount:
          $ref: "#/definitions/TrashAmount"
        composition:
          $ref: "#/definitions/TrashComposition"
        name:
          $ref: "#/definitions/TrashName"
        address:
          $ref: "#/definitions/TrashAddress"
        hashtags:
          $ref: "#/definitions/TrashHashtags"
  CreateTrashpoint:
    name: trashpoint
    in: body
    required: true
    schema:
      type: object
      required: [datasetId, location, status, amount, composition, name, address]
      properties:
        datasetId:
          $ref: "#/definitions/UUID"
        location:
          $ref: "#/definitions/GeoPoint"
        status:
          $ref: "#/definitions/TrashCreateStatus"
        amount:
          $ref: "#/definitions/TrashAmount"
        composition:
          $ref: "#/definitions/TrashComposition"
        name:
          $ref: "#/definitions/TrashName"
        address:
          $ref: "#/definitions/TrashAddress"
        hashtags:
          $ref: "#/definitions/TrashHashtags"
  #-----------------------------------------------------------------------------
  MapQuery:
    name: query
    in: body
    required: true
    schema:
      type: object
      required: [datasetId, rectangle]
      properties:
        datasetId:
          $ref: "#/definitions/UUID"
        rectangle:
          $ref: "#/definitions/GeoRectangle"
        cellSize:
          $ref: "#/definitions/GeoResolution"
        scale:
          $ref: "#/definitions/GeoScale"
  MapQueryGrid:
    name: query
    in: body
    required: true
    schema:
      type: object
      required: [datasetId, coordinates]
      properties:
        datasetId:
          $ref: "#/definitions/UUID"
        cellSize:
          $ref: "#/definitions/GeoResolution"
        coordinates:
          $ref: "#/definitions/GridCoordinates"
        scale:
          $ref: "#/definitions/GeoScale"
  #-----------------------------------------------------------------------------
  UUID:
    description: UUID.
    name: id
    in: path
    required: true
    type: string
  UUID2:
    description: UUID.
    name: id2
    in: path
    required: true
    type: string
  #-----------------------------------------------------------------------------
  AuthRequest:
    description: Credentials used for authorization.
    name: credentials
    in: body
    required: true
    schema:
      type: object
      required: [source, token]
      properties:
        source:
          $ref: "#/definitions/AuthSource"
        token:
          $ref: "#/definitions/AuthToken"

################################################################################
responses:
################################################################################
  AdminTrashpoints:
    description: List of trashpoints for admin consumption.
    schema:
      $ref: "#/definitions/PaginatedTrashpoints"
  AreaTrashpoints:
    description: List of trashpoints for area leader consumption.
    schema:
      $ref: "#/definitions/PaginatedAreaTrashpoints"
  Teams:
    description: List of teams.
    schema:
      type: array
      items:
        $ref: "#/definitions/Team"
  StorageAuth:
    description: A short-term authorization allowing access to storage operations.
    schema:
      type: array
      items:
        type: object
        required: [permission, type]
        properties:
          permission:
            $ref: "#/definitions/AuthPermission"
          type:
            description: The type of resource.
            $ref: "#/definitions/TrashImageType"
  ErrorSet:
    description: Contains errors.
    schema:
      type: array
      items:
        $ref: "#/definitions/Error"
################################################################################
definitions:
################################################################################
  #-----------------------------------------------------------------------------
  # Area properties.
  #-----------------------------------------------------------------------------
  Area:
    type: object
    required: [id, name]
    properties:
      id:
        description: A unique code in geo HASC notation. Eg. US.CA.SF would mean US > California > San Francisco.
        type: string
      name:
        type: string
      # outline: #FIXME: don't need the outline on frontend for now
      #   type: object #FIXME: describe the geojson structure explicitly
      parentId:
        description: Each area can optionally be classified as physically located under another.
        type: string
      leaderId:
        description: Area can be optionally be assigned to a user.
        $ref: "#/definitions/UUID"
  #-----------------------------------------------------------------------------
  # Team properties.
  #-----------------------------------------------------------------------------
  Team:
    type: object
    required: [id, name]
    properties:
      id:
        description: A unique code of team
        type: string
      name:
        description: A name of team
        type: string
      teamDescription:
        description: Desctiption of team
        type: string
      trashpoints:
        description: How many trashpoints have this team
        type: integer
      users:
        description: How many users have this team
        type: integer
  #-----------------------------------------------------------------------------
  # Account properties.
  #-----------------------------------------------------------------------------
  Account:
    type: object
    required: [id, role]
    properties:
      id:
        $ref: "#/definitions/UUID"
      name:
        type: string
      email:
        type: string
      role:
        type: string
        enum: [volunteer, leader, admin, superadmin]
      country:
        $ref: "#/definitions/CountryCode"
      pictureURL:
        type: string
      termsAcceptedAt:
        $ref: "#/definitions/ISOTimestamp"
      locked:
        type: boolean
      team:
        type:
          - string
          - 'null'
  AccountPlusAreas:
    allOf:
    - "$ref": "#/definitions/Account"
    - type: object
      required: [areas]
      properties:
        areas:
          description: Empty for users who are not area leaders. Contains area codes led by this user.
          type: array
          items:
            type: string
            minLength: 2
  AccountFullInfo:
    allOf:
    - "$ref": "#/definitions/Account"
    - type: object
      required: [locked, createdAt, createdBy]
      properties:
        locked:
          type: boolean
        createdAt:
          $ref: "#/definitions/ISOTimestamp"
        createdBy:
          $ref: "#/definitions/UUID"
        updatedAt:
          description: When the account was last modified. If missing it means this is a freshly created account.
          $ref: "#/definitions/ISOTimestamp"
        updatedBy:
          description: Who caused this account to be last modified. If missing it means this is a freshly created account.
          $ref: "#/definitions/UUID"
  #-----------------------------------------------------------------------------
  # Cluster characteristics.
  #-----------------------------------------------------------------------------
  Cluster:
    description: If not present, this object is a trashpoint. If present, this object is a cluster and this property contains cluster-specific properties.
    type: object
    required: [count, status, location, coordinates]
    properties:
      count:
        type: number
        format: int32
        minimum: 1
      status:
        $ref: "#/definitions/TrashStatus"
      location:
        $ref: "#/definitions/GeoPoint"
      coordinates:
        $ref: "#/definitions/GridCoordinates"
  #-----------------------------------------------------------------------------
  # Trashpoints as paginated sets.
  #-----------------------------------------------------------------------------
  PaginatedTrashpoints:
    type: object
    required: [total, pageSize, pageNumber, records]
    properties:
      total:
        $ref: "#/definitions/PageTotal"
      pageSize:
        $ref: "#/definitions/PageSize"
      pageNumber:
        $ref: "#/definitions/PageNumber"
      records:
        type: array
        items:
          $ref: "#/definitions/BriefTrashpoint"
  PaginatedAreaTrashpoints:
    allOf:
    - $ref: "#/definitions/PaginatedTrashpoints"
    - type: object
      required: [statusCounts]
      properties:
        statusCounts:
          type: object
          properties:
            threat:
              $ref: "#/definitions/Count"
            regular:
              $ref: "#/definitions/Count"
            cleaned:
              $ref: "#/definitions/Count"
            outdated:
              $ref: "#/definitions/Count"
  #-----------------------------------------------------------------------------
  # Trashpoint types.
  #-----------------------------------------------------------------------------
  OverviewTrashpoint:
    description: Simplified version of trashpoint, used when listing trashpoint overviews.
    type: object
    required: [id, location, status]
    properties:
      id:
        $ref: "#/definitions/UUID"
      location:
        $ref: "#/definitions/GeoPoint"
      status:
        $ref: "#/definitions/TrashStatus"
  BriefTrashpoint:
    allOf:
    - "$ref": "#/definitions/OverviewTrashpoint"
    - type: object
      description: Simplified version of trashpoint, used when listing a user's own trashpoints.
      required: [name, address]
      properties:
        name:
          type: string
          description: A unique name of this trashpoint.
        address:
          type: string
          description: The address where the trashpoint was created.
  Trashpoint:
    allOf:
    - "$ref": "#/definitions/BriefTrashpoint"
    - type: object
      description: Full version of a trashpoint.
      required: [composition, amount, hashtags, createdAt, createdBy, updatedAt, updatedBy]
      properties:
        composition:
          $ref: "#/definitions/TrashComposition"
        amount:
          $ref: "#/definitions/TrashAmount"
        hashtags:
          $ref: "#/definitions/TrashHashtags"
        counter:
          type: integer
          minimum: 1
        createdAt:
          $ref: "#/definitions/ISOTimestamp"
        updatedAt:
          $ref: "#/definitions/ISOTimestamp"
        createdBy:
          $ref: "#/definitions/UUID"
        updatedBy:
          $ref: "#/definitions/UUID"
        createdByName:
          type: string
          description: Name of the user that created this trashpoint.
        updatedByName:
          type: string
          description: Name of the user that updated this trashpoint.
        areas:
          $ref: "#/definitions/TrashAreas"
  #-----------------------------------------------------------------------------
  # Trashpoint characteristics.
  #-----------------------------------------------------------------------------
  TrashStatus:
    type: string
    description: The current status of this trashpoint. If it's a cluster, the status is determined by the majority of trashpoints in it.
    enum: [threat, regular, cleaned, outdated]
  TrashCreateStatus:
    type: string
    description: The initial status of a newly created trashpoint.
    enum: [threat, regular]
  TrashModifyStatus:
    type: string
    description: Change the status of the trashpoint.
    enum: [threat, regular, cleaned]
  TrashAreas:
    description: Under what geographical areas this trashpoint falls.
    type: array
    uniqueItems: true
    items:
      type: string
      minLength: 1
  TrashComposition:
    description: The type of composition the trash is made of.
    type: array
    uniqueItems: true
    minItems: 1
    items:
      type: string
      enum: [glass, electronics, paper, domestic waste, furniture, organic waste, plastic, metal, tyres]
  TrashAmount:
    description: The amount of trash.
    type: string
    minItems: 1
    enum: [handful, bagful, cartload, truckload]
  TrashName:
    type: string
    minLength: 1
    maxLength: 100
  TrashAddress:
    type: string
    minLength: 1
    maxLength: 250
  TrashHashtags:
    description: Extra information added by the user describing the trash.
    type: array
    maxItems: 15
    uniqueItems: true
    items:
      description: 1-25 characters plus leading hash (#).
      type: string
      pattern: '^#[a-zA-Z0-9]+$'
      minLength: 2
      maxLength: 26
  #-----------------------------------------------------------------------------
  # Trashpoint image characteristics.
  #-----------------------------------------------------------------------------
  TrashpointImage:
    type: object
    required: [id, trashpointId, type]
    properties:
      id:
        description: The unique identifier for this image.
        $ref: "#/definitions/UUID"
      trashpointId:
        description: The identifier of the trashpoint this image is associated with.
        $ref: "#/definitions/UUID"
      type:
        $ref: "#/definitions/TrashImageType"
      url:
        description: The URL at which the image is available. Not present when the status is not "ready".
        type: string
      parentId:
        description: Depending on the type, some images are related to another.
        $ref: "#/definitions/UUID"
  TrashImageType:
    type: string
    enum: [medium, thumbnail]
  #-----------------------------------------------------------------------------
  # Dataset characteristics.
  #-----------------------------------------------------------------------------
  Dataset:
    description: A collection of data objects with a common internal structure.
    type: object
    required: [id, type]
    properties:
      id:
        $ref: "#/definitions/UUID"
      type:
        description: The type of objects contained in this dataset.
        type: string
        enum: [trashpoints]
  #-----------------------------------------------------------------------------
  # Grid data.
  #-----------------------------------------------------------------------------
  GridCoordinates:
    description: A set of integer representing the coordinates of a cluster grid cell.
    type: array
    items:
      type: number
      format: int32
  #-----------------------------------------------------------------------------
  # Geographical data.
  #-----------------------------------------------------------------------------
  GeoLongitude:
    type: number
    format: float
    description: Geographical geodetic longitude, expressed in decimal degrees in
      the range (-180, 180).
    minimum: -180
    exclusiveMinimum: true
    maximum: 180
    exclusiveMaximum: true
  GeoLatitude:
    type: number
    format: float
    description: Geographical geodetic latitude, expressed in decimal degrees in the
      range (-90, 90).
    minimum: -90
    exclusiveMinimum: true
    maximum: 90
    exclusiveMaximum: true
  GeoPoint:
    type: object
    description: A geographical point coordinate, expressed as latitude and longitude.
    required: [latitude, longitude]
    properties:
      latitude:
        $ref: "#/definitions/GeoLatitude"
      longitude:
        $ref: "#/definitions/GeoLongitude"
  GeoRectangle:
    description: Two geopoints that represent the corners of a rectangle.
    type: object
    required: [nw, se]
    properties:
      nw:
        $ref: "#/definitions/GeoPoint"
      se:
        $ref: "#/definitions/GeoPoint"
  GeoScale:
    description: DEPRECATED, DO NOT USE ANYMORE!
    x-deprecated: true
    type: string
    enum: [1000km, 500km, 300km, 200km, 180km, 160km, 140km, 120km, 100km, 90km, 80km, 70km, 60km, 50km, 30km, 20km, 10km, 5km, 3km, 2km, 1km, 500m, 300m, 200m, 100m, 50m, 30m, 20m, 10m, 5m, 1m]
  GeoResolution:
    description: The horizontal resolution of the clustering grid, expressed in geodetic longitude degrees.
    type: number
    format: float
    minimum: 0.000001
  #-----------------------------------------------------------------------------
  # Authorization data structures.
  #-----------------------------------------------------------------------------
  AuthSource:
    type: string
    enum: [facebook, google]
  AuthPermission:
    type: object
    required: [token, resourceId]
    properties:
      token:
        $ref: "#/definitions/AuthToken"
      resourceId:
        $ref: "#/definitions/UUID"
  AuthToken:
    type: string
  #-----------------------------------------------------------------------------
  # Generic data.
  #-----------------------------------------------------------------------------
  UUID:
    type: string
    description: UUID that serves to uniquely identify this object.
  CountryCode:
    description: ISO ALPHA-2 country code.
    type: string
    enum: [AD, AE, AF, AG, AI, AL, AM, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]
  ISOTimestamp:
    description: ISO8601 timestamp.
    type: string
    pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$'
  #-----------------------------------------------------------------------------
  # Error structure.
  #-----------------------------------------------------------------------------
  Error:
    type: object
    required: [message]
    properties:
      code:
        type: string
      message:
        type: string
  #-----------------------------------------------------------------------------
  # Pagination-specific properties.
  #-----------------------------------------------------------------------------
  PageTotal:
    description: Total number of user's trashpoints.
    type: integer
    minimum: 0
  PageSize:
    description: The number of trashpoints returned.
    type: integer
    minimum: 10
    maximum: 50
  PageNumber:
    description: The number of the page requested regarding pagination.
    type: integer
    minimum: 1
  Count:
    description: A count of some sort.
    type: number
    format: int32
    minimum: 0
